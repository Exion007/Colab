# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Exion007/Colab/blob/main/pandas_intro.ipynb
"""

import pandas as pd

# How to create DataFrames

# Specify values for each column
df1 = pd.DataFrame(
{ "a" : [4, 5, 6],
  "b" : [7, 8, 9],
  "c" : [10, 11, 12]
},
  index = [1, 2, 3])

# Specify values for each row
df2 = pd.DataFrame(
[ [4, 5, 6],
  [7, 8, 9],
  [10, 11, 12]
],
  index=[1, 2, 3],
  columns=['a', 'b', 'c'])

# Create DataFrame with a MultiIndex
df3 = pd.DataFrame(
{"a" : [4 ,5, 6],
"b" : [7, 8, 9],
"c" : [10, 11, 12]},
index = pd.MultiIndex.from_tuples(
[('d', 1), ('d', 2),
 ('e', 2)],
 names=['n', 'v']))

print(df1, "\n")
print(df2, "\n")
print(df3, "\n")
df3

# Reshaping Data

df = pd.DataFrame({'A': {0: 'a', 1: 'b', 2: 'c'},
                   'B': {0: 1, 1: 3, 2: 5},
                   'C': {0: 2, 1: 4, 2: 6}})
print(df,"\n")

# .melt()
print(df.melt(id_vars=['A'], value_vars=['B']), "\n")
print(df.melt(id_vars=['A'], value_vars=['B', 'C']), "\n")
print(df.melt(id_vars=['A'], value_vars=['B'],
      var_name='VarName', value_name='ValName'), "\n")
df.columns = [list('ABC'), list('DEF')]
print(df)

# Reading csv files using Pandas
# First, upload the file; then, run the code

df = pd.read_csv("movies.csv")
df.head(3)

print(f'Number of rows: {df.shape[0]}\nNumber of columns: {df.shape[1]}')

df.info()

# Given the id of the film, how to reach its info?
df.loc[493]

# How to get the row(s) based on a column value?,

# 1 - df.loc[df['col1'] == value]\n",
# 2 - df.loc[df['col1'].isin([value1, value2, value3, ...])]
# 3 - df.loc[(df['col1'] == value) & (df['col2'] < value)]

#df.loc[df.title == "The Dark Knight"]
#df.loc[df["title"].isin(["Batman Begins", "The Dark Knight", "The Dark Knight Rises"])]
df.loc[(df['vote_average'] > 8.5) & (df['runtime'] > 150)]

# How to filter data?

print(f'Before filtering:\nNumber of rows: {df.shape[0]}\nNumber of columns: {df.shape[1]}\n')

# Delete rows containing "NULL" value using dropna()
newdf = df.dropna()

# Set inplace parameter as True, if you want the filtering operation to be conducted on the original dataframe
# df.dropna(inplace = True)

print(f'After filtering:\nNumber of rows: {newdf.shape[0]}\nNumber of columns: {newdf.shape[1]}')

# How to group columns?

# You can use column names to select the columns you want to use.
# df.loc[:, ['column1', 'column3', 'column4']]

# You may use both column indices or their names in order to group them.
# You can also create a seperate dataframe which contains only the columns that you selected.
# !! Compared to loc(), iloc() takes indices as parameters

df.iloc[:5,]             # First 5 rows
df.iloc[1:5,]            # Second to Fifth row
df.iloc[5,0]             # Sixth row and 1st column
df.iloc[1:5,0]           # Second to Fifth row, first column
df.iloc[1:5,:5]          # Second to Fifth row, first 5 columns
newdf = df.iloc[2:7,1:3] # Third to Seventh row, 2nd and 3rd column
newdf.head()

# Filtering based on a column value
#newdf = df[df["release_date"].notna()]
#newdf = df.drop(df.loc[df["vote_average"] < 8.5].index)

# Filtering based on column names
# Note: In addition to the indices method we used above, we can also use column names.

to_del = ["original_language", "vote_count", "production_companies", "tagline", "popularity", "overview"]
newdf = df.drop(to_del, axis=1)
newdf.head()

